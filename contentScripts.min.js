console.log("contentScripts.min.js");
var egret;
(function (t) {
    var e;
    (function (t) {
        var e = function () {
            function t() {
                var t = this;
                this.events = {};
                this.on = function (e, n) {
                    if (!(e in t.events)) t.events[e] = [];
                    t.events[e].push(n);
                    return t
                };
                this.trigger = function (e, n) {
                    var o = t.events[e];
                    if (!o) return;
                    for (var r = 0; r < o.length; r++) {
                        if (typeof o[r] == "function") {
                            o[r](n)
                        }
                    }
                }
            }
            t.prototype.removeAllEvents = function () {
                this.events = {}
            };
            return t
        }();
        t.EventBase = e
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var EGRETRELEASE = true;
var egret;
(function (t) {
    var e;
    (function (t) {
        var e = function () {
            function t(t, e) {
                this.host = t;
                this.callbacks = {};
                this.namedCallbacks = {};
                this.key = null;
                this.getKey();
                this._connect(e)
            }
            t.prototype._connect = function (t) {};
            t.prototype.post = function (t, e, n) {
                if (e === void 0) {
                    e = null
                }
                var o = e;
                if (n) {
                    o = (performance.now() + Math.random() * 100).toString();
                    this.callbacks[o] = n
                }
                var r = {
                    id: o,
                    data: t,
                    key: this.key
                };
                this._doPost(r);
                return this
            };
            t.prototype._doPost = function (t) {
                this.port.postMessage(t)
            };
            t.prototype.on = function (t, e) {
                if (!this.namedCallbacks[t]) this.namedCallbacks[t] = [];
                this.namedCallbacks[t].push(e);
                return this
            };
            t.prototype.remove = function (t, e) {
                var n = this.namedCallbacks[t];
                if (n) {
                    var o = n.indexOf(e);
                    if (o < 0) return;
                    n.splice(o, 1)
                }
                return this
            };
            t.prototype.removeAll = function () {
                this.namedCallbacks = {};
                return this
            };
            t.prototype._parseMsgData = function (t) {
                return null
            };
            t.prototype._onMessage = function (t) {
                var e = this;
                var n = this._parseMsgData(t);
                var o = n.id;
                var r = n.data.name;
                var i = this.callbacks[o];
                if (i) {
                    i(n.data);
                    delete this.callbacks[o]
                }
                var s = this.namedCallbacks[r];
                if (s) {
                    s.forEach(function (t) {
                        var r = t(n.data, function (t) {
                            if (o) {
                                e.post(t, o)
                            }
                        });
                        if (o && r) {
                            e.post(r, o)
                        }
                    })
                }
            };
            t.prototype.getKey = function () {
                if (window.name == "") {
                    window.name = Date.now().toString()
                }
                this.key = window.name
            };
            return t
        }();
        t.PortBase = e
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var __extends = this && this.__extends || function (t, e) {
    for (var n in e)
        if (e.hasOwnProperty(n)) t[n] = e[n];

    function o() {
        this.constructor = t
    }
    t.prototype = e === null ? Object.create(e) : (o.prototype = e.prototype, new o)
};
var egret;
(function (t) {
    var e;
    (function (t) {
        var e = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments)
            }
            e.prototype._connect = function (t) {
                var e = this;
                var n = chrome.runtime.connect();
                n.onMessage.addListener(function (t) {
                    return e._onMessage(t)
                });
                this.port = n;
                t && window.setTimeout(t.bind(this), 0)
            };
            e.prototype._doPost = function (t) {
                this.port.postMessage(t)
            };
            e.prototype._parseMsgData = function (t) {
                return t
            };
            return e
        }(t.PortBase);
        t.ChromePort = e;
        var n = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments)
            }
            e.prototype._connect = function (t) {
                var e = this;
                var n = chrome.runtime.connect();
                n.onMessage.addListener(function (t) {
                    return e._onMessage(t)
                });
                this.port = n;
                window.addEventListener("message", function (t) {
                    return e._onWindowMessage(t.data)
                });
                t && window.setTimeout(t.bind(this), 0)
            };
            e.prototype._doPost = function (t) {
                this.port.postMessage(t)
            };
            e.prototype._parseMsgData = function (t) {
                return t
            };
            e.prototype._onMessage = function (e) {
                if (e.toContent) {
                    t.prototype._onMessage.call(this, e)
                } else {
                    window.postMessage(e, "*")
                }
            };
            e.prototype._onWindowMessage = function (t) {
                if (t["from"] == "stage") {
                    var e = JSON.parse(t.data);
                    this.post(e, t.id)
                }
            };
            return e
        }(t.PortBase);
        t.ContentPort = n;
        var o = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments)
            }
            e.prototype._connect = function (t) {
                var e = this;
                window.addEventListener("message", function (t) {
                    return e._onMessage(t)
                });
                t && window.setTimeout(t.bind(this), 0)
            };
            e.prototype._doPost = function (t) {
                window.postMessage({
                    from: "stage",
                    id: t.id,
                    data: JSON.stringify(t.data)
                }, "*")
            };
            e.prototype._parseMsgData = function (t) {
                return t.data
            };
            e.prototype._onMessage = function (e) {
                var n = this._parseMsgData(e);
                if (!n.data) return;
                if (n["from"] == "stage") return false;
                t.prototype._onMessage.call(this, e)
            };
            return e
        }(t.PortBase);
        t.StagePort = o;
        var r = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments)
            }
            e.prototype._connect = function (t) {
                var e = this;
                var n = new WebSocket("ws://" + this.host);
                this.port = n;
                n.addEventListener("message", function (t) {
                    return e._onMessage(t)
                });
                n.addEventListener("open", function (n) {
                    return t(e)
                })
            };
            e.prototype._doPost = function (t) {
                var e = this.port;
                e.send(JSON.stringify(t))
            };
            e.prototype._parseMsgData = function (t) {
                return JSON.parse(t.data)
            };
            return e
        }(t.PortBase);
        t.WsPort = r
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var egret;
(function (t) {
    var e;
    (function (t) {
        t.PortFactory = null
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var egret;
(function (t) {
    var e;
    (function (e) {
        var n = function () {
            function e() {}
            e.prototype.getStagePortClass = function () {
                return t.devtool.StagePort
            };
            e.prototype.getPanelPortClass = function () {
                return t.devtool.ChromePort
            };
            e.prototype.getExtContentPortClass = function () {
                return t.devtool.ContentPort
            };
            return e
        }();
        e.ChromePortFactory = n;
        e.PortFactory = new n
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var egret;
(function (t) {
    var e;
    (function (t) {
        var e = function () {
            function e() {}
            e.start = function () {
                if (e.instance == null) {
                    e.instance = new e
                }
                var n = t.PortFactory.getExtContentPortClass();
                var o = new n(location.host, function () {
                    e.instance.port = o;
                    window.setTimeout(function () {                    
                        e.instance.injectScripts()
                    }, 5000);
                    // var itl = window.setInterval(
                    //     function () {
                    //         if(window['egret'] && window['egret']["Sprite"]){
                    //             e.instance.injectScripts();
                    //             window.clearInterval(itl);
                    //         }
                    //     }, 100
                    // );
                })
            };
            e.prototype.injectScripts = function () {
                var t = this;
                var n = ["ipt/shared/EventBase.js", "ipt/shared/utils.js", "ipt/shared/TreeNode.js", "ipt/shared/PortBase.js", "ipt/shared/Port.js", "ipt/shared/IPortFactory.js", "ipt/shared/ChromePortFactory.js", "ipt/inject/IInspector.js", "ipt/inject/Inspector.js", "ipt/inject/LarkInspector.js", "ipt/inject/Egret2xInspector.js", "ipt/inject/Main.js"];
                if (EGRETRELEASE) {
                    n = ["injectScripts.min.js"]
                }
                e.addScript(n);
                window.setTimeout(function () {
                    t.startInspectIfDevToolOpen()
                }, 200)
            };
            e.prototype.injectScript = function (t) {
                var e = document.createElement("script");
                e.innerHTML = t;
                document.head.appendChild(e)
            };
            e.addScript = function (t) {
                var e = this;
                t.forEach(function (t) {
                    var n = e.urlFormatFunc();
                    var o = document.createElement("script");
                    o.src = n(t);
                    o.async = false;
                    document.head.appendChild(o)
                })
            };
            e.prototype.startInspectIfDevToolOpen = function () {
                var t = this;
                this.port.post({
                    name: "isDevToolOpen"
                }, null, function (e) {
                    if (e) {
                        t.injectScript(
                            `(function () {    
                                var t = window.setInterval(
                                    function () {
                                        var a = egret && egret.devtool && egret.devtool.start&& (window.clearInterval(t) || egret.devtool.start());
                                        console.log("waiting"); 
                                    }, 100);
                            })();`
                        )
                    }
                })
            };
            e.urlFormatFunc = function () {
                var t = window["chrome"] || null;
                if (t && t.extension && t.extension.getURL) return t.extension.getURL;
                return function (t) {
                    return t
                }
            };
            return e
        }();
        t.Loader = e
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
egret.devtool.Loader.start();