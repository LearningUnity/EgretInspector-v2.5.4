console.log("injectScripts.min.js");
var egret;
(function (t) {
    var e;
    (function (t) {
        var e = function () {
            function t() {
                var t = this;
                this.events = {};
                this.on = function (e, r) {
                    if (!(e in t.events)) t.events[e] = [];
                    t.events[e].push(r);
                    return t
                };
                this.trigger = function (e, r) {
                    var i = t.events[e];
                    if (!i) return;
                    for (var n = 0; n < i.length; n++) {
                        if (typeof i[n] == "function") {
                            i[n](r)
                        }
                    }
                }
            }
            t.prototype.removeAllEvents = function () {
                this.events = {}
            };
            return t
        }();
        t.EventBase = e
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var __extends = this && this.__extends || function (t, e) {
    for (var r in e)
        if (e.hasOwnProperty(r)) t[r] = e[r];

    function i() {
        this.constructor = t
    }
    t.prototype = e === null ? Object.create(e) : (i.prototype = e.prototype, new i)
};
var egret;
(function (t) {
    var e;
    (function (t) {
        var e = function () {
            function t() {}
            t.after = function (e, r, i) {
                if (t.funcs[r]) return;
                t.funcs[r] = window.setTimeout(function () {
                    t.funcs[r] = null;
                    i()
                }, e)
            };
            t.funcs = {};
            return t
        }();
        t.RunIt = e;
        var r = function (t) {
            __extends(e, t);

            function e(e) {
                var r = this;
                t.call(this);
                this.el = e;
                this.lastX = 0;
                this.lastY = 0;
                this.isMouseDown = false;
                this.monitorY = true;
                this.begin = function (t) {
                    if (r.isMouseDown) return;
                    r.lastX = t.screenX;
                    r.lastY = t.screenY;
                    r.isMouseDown = true;
                    document.documentElement.addEventListener("mousemove", r.move);
                    document.documentElement.addEventListener("mouseup", r.end);
                    document.body.style["-webkit-user-select"] = "none"
                };
                this.move = function (t) {
                    if (r.isMouseDown == false) return;
                    var e = t.screenY - r.lastY;
                    var i = t.screenX - r.lastX;
                    if (r.monitorY) {
                        r.el.css({
                            transform: "translateY(" + e + "px)"
                        })
                    } else {
                        r.el.css({
                            transform: "translateX(" + i + "px)"
                        })
                    }
                };
                this.end = function (t) {
                    r.isMouseDown = false;
                    document.documentElement.removeEventListener("mousemove", r.move);
                    document.documentElement.removeEventListener("mouseup", r.end);
                    document.body.style["-webkit-user-select"] = "";
                    var e = t.screenY - r.lastY;
                    var i = t.screenX - r.lastX;
                    r.trigger("move", r.monitorY ? e : i);
                    r.el.css({
                        transform: ""
                    })
                };
                window.addEventListener("resize", function () {
                    r.trigger("move", 0)
                });
                e.mousedown(this.begin)
            }
            return e
        }(t.EventBase);
        t.PanelHandle = r;
        var i = function () {
            function t() {
                var t = this;
                this.controlHeight = 30;
                this.nodesHeight = 300;
                this.propsHeight = 300;
                this.nodesWidth = 300;
                this.propsWidth = 300;
                this.width = 300;
                window.addEventListener("resize", function () {
                    t.resize(0, 0)
                });
                this.resize(0, 0)
            }
            t.prototype.resize = function (t, e) {
                var r = window.innerHeight;
                var i = window.innerWidth;
                this.nodesHeight = this.propsHeight = r;
                this.propsWidth -= t;
                this.nodesWidth = i - this.propsWidth - 10
            };
            t.prototype.setWidth = function (t) {
                this.width -= t
            };
            return t
        }();
        t.Layout = i;

        function n(t) {
            var e = {};
            if (!t) return e;
            if (t.indexOf("?") == 0) t = t.substr(1);
            var r = t.split("&");
            r.forEach(function (t) {
                if (t == "?") return;
                if (!t) return;
                var r = t.split("=");
                e[r[0]] = r.length > 1 ? r[1] : null
            });
            return e
        }
        t.parseParam = n
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
Object.defineProperty(Object.prototype, "getDisplayName", {
    value: function () {
        if (typeof this == "number") return this;
        if (egret.getQualifiedClassName) return egret.getQualifiedClassName(this);
        if (this.constructor && this.constructor.name) return this.constructor.name;
        if (lark && this.__classFlag__) {
            return lark.Types[this.__classFlag__]
        }
    }
});
var __extends = this && this.__extends || function (t, e) {
    for (var r in e)
        if (e.hasOwnProperty(r)) t[r] = e[r];

    function i() {
        this.constructor = t
    }
    t.prototype = e === null ? Object.create(e) : (i.prototype = e.prototype, new i)
};
var egret;
(function (t) {
    var e;
    (function (t) {
        var e = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments);
                this._children = [];
                this._props = [];
                this.parentHash = -1;
                this.show = false;
                this.visible = true;
                this.type = null;
                this.memberName = null;
                this.selected = false;
                this.expandable = false;
                this.isGetter = false;
                this.isSetter = false;
                this.icon = "-";
                this.dirty = false;
                this.hasChildren = false
            }
            e.prototype.updateIcon = function () {
                this.icon = this.hasChildren == false ? "&nbsp;" : this.show ? "-" : "+"
            };
            e.prototype.recover = function () {
                if (this.show && this.hasChildren && (this.children != this._children || this.props != this._props)) {
                    this.children = null;
                    this.props = null;
                    this.showChildren()
                }
            };
            e.prototype.showChildren = function () {
                if (!this.hasChildren) return;
                this.show = true;
                if (!this.children) {
                    this.children = this._children;
                    this.props = this._props;
                    this.trigger(e.ChildrenChange)
                }
                this.updateIcon();
                this.trigger(e.Show)
            };
            e.prototype.toggle = function () {
                if (!this.children && !this.show) {
                    this.showChildren();
                    return
                }
                this.show = !this.show;
                this.updateIcon();
                this.trigger(e.Show)
            };
            e.prototype.parseChildren = function () {
                e.parseChildren(this.raw, this)
            };
            e.prototype.reset = function (t) {
                if (t === void 0) {
                    t = true
                }
                this._children.forEach(function (t) {
                    return t.reset()
                });
                this._props.forEach(function (t) {
                    return t.reset()
                });
                this._children = [];
                this._props = [];
                this.children = null;
                this.props = null;
                this.show = false;
                if (t) {
                    e.hash2Node[this.rawHash] = undefined;
                    e.hash2DisplayObject[this.rawHash] = undefined
                }
            };
            Object.defineProperty(e.prototype, "raw", {
                get: function () {
                    return e.hash2DisplayObject[this.rawHash]
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(e.prototype, "parent", {
                get: function () {
                    if (this.parentHash == -1) return null;
                    return e.hash2Node[this.parentHash]
                },
                enumerable: true,
                configurable: true
            });
            e.getValue = function (t, e) {
                if (t == null) return String(t);
                var r = typeof t;
                var i = null;
                e.type = r;
                switch (r) {
                    case "string":
                        i = JSON.stringify(t);
                        break;
                    case "number":
                        if (t == NaN) t = "NaN";
                        i = t;
                        return i;
                    case "array":
                        i = String(t);
                        e.expandable = true;
                        break;
                    case "object":
                        i = t.constructor["name"] || t["__class__"] || "object";
                        e.expandable = true;
                        break;
                    case "function":
                        i = String(t);
                        e.name;
                        break;
                    default:
                        i = String(t)
                }
                return i
            };
            e.prototype.naviToDisplayObject = function (t) {
                if (!e.isLinked(t)) {
                    e.linkToIt(t);
                    this.dirty = true
                }
                this.naviToNode(t.hashCode)
            };
            e.prototype.naviToNode = function (t, r) {
                if (r === void 0) {
                    r = false
                }
                var i = e.getByHash(t);
                var n = [];
                var s = i.parent;
                while (s != null) {
                    n.push(s);
                    s = s.parent
                }
                for (var o = n.length - 1; o >= 0; o--) n[o].showChildren();
                i.showUp()
            };
            e.prototype.showUp = function () {
                if (e.selected) {
                    e.selected.selected = false;
                    e.selected.trigger(e.UnSelected)
                }
                this.selected = true;
                e.selected = this;
                this.trigger(e.OnSelected)
            };
            e.prototype.find = function (t, e) {
                if (this.rawHash == t) {
                    e.push(this);
                    return true
                }
                if (!this.hasChildren) return false;
                e.push(this);
                var r = this._props.filter(function (r) {
                    return r.find(t, e)
                });
                var i = r.length > 0;
                if (!i) {
                    r = this._children.filter(function (r) {
                        return r.find(t, e)
                    });
                    i = r.length > 0
                }
                if (!i) {
                    e.pop();
                    return false
                }
                return true
            };
            e.prototype.parseRawProps = function (t, r, i) {
                if (r === void 0) {
                    r = new e
                }
                return e.parseRawProps(this.raw, t, r, i)
            };
            e.parseRawProps = function (t, r, i, n) {
                if (i === void 0) {
                    i = new e
                }
                if (n === void 0) {
                    n = {
                        showPrivate: true,
                        showMethods: false
                    }
                }
                if (r < 0) return;
                if (typeof t != "object") return;
                var s = [];
                for (var o in t) {
                    if (n.showPrivate === false && (String(o).indexOf("_") == 0 || String(o).indexOf("$") == 0)) {
                        continue
                    }
                    var a = new e;
                    a.name = o;
                    var h = null;
                    var l = null;
                    var c = t;
                    l = Object.getOwnPropertyDescriptor(t, o);
                    while (l == null && c) {
                        c = Object.getPrototypeOf(c);
                        l = Object.getOwnPropertyDescriptor(c, o)
                    }
                    if (l) {
                        a.isGetter = l.get != undefined;
                        a.isSetter = a.isGetter && l.set != undefined
                    }
                    try {
                        h = t[o]
                    } catch (u) {
                        h = "faild to get value"
                    }
                    if (typeof h == "function" && n.showMethods != true) continue;
                    e.parseRawProps(h, r - 1, a);
                    a.value = e.getValue(h, a);
                    s.push(a)
                }
                s.sort(function (t, e) {
                    var r = t.name;
                    var i = e.name;
                    return r > i ? 1 : r == i ? 0 : -1
                });
                i.name = t.getDisplayName();
                i._props = s;
                return i
            };
            e.parseRawProp = function (t, r, i, n) {
                if (n === void 0) {
                    n = new e
                }
                n.name = t;
                e.parseRawProps(r, i - 1, n);
                n.value = e.getValue(r, n);
                return n
            };
            e.prototype.toString = function () {
                return this.name
            };
            e.linkToIt = function (t, r) {
                if (r === void 0) {
                    r = null
                }
                var i = e.hash2Node[t.hashCode];
                var n = i != undefined;
                if (n) {
                    i.reset(false);
                    e.parseChildren(t, i, 0)
                } else {
                    i = e.parseNode(t)
                }
                i.showChildren();
                if (r) {
                    for (var s = 0; s < i._children.length; s++) {
                        if (i._children[s].rawHash == r.rawHash) i._children[s] = r
                    }
                }
                if (n || !t.parent) return i;
                return e.linkToIt(t.parent, i)
            };
            e.unLinkIt = function (t) {
                var r = e.hash2Node[t.hashCode];
                var i = r.parent;
                var n = i._children.indexOf(r);
                i._children.splice(n, 1)
            };
            e.isLinked = function (t) {
                return e.hash2Node[t.hashCode] != undefined
            };
            e.parseChildren = function (t, r, i) {
                if (i === void 0) {
                    i = 0
                }
                if (t["numChildren"] !== undefined) {
                    var n = t;
                    if (n.numChildren == 0) {
                        r.hasChildren = false;
                        return
                    } else r.hasChildren = true;
                    r._children = [];
                    for (var s = 0, o = n.numChildren; s < o; s++) {
                        var a = e.parseNode(n.getChildAt(s), new e, false, i);
                        r._children.push(a)
                    }
                }
            };
            e.parseNode = function (t, r, i, n) {
                if (r === void 0) {
                    r = new e
                }
                if (i === void 0) {
                    i = false
                }
                if (n === void 0) {
                    n = 1
                }
                if (n < 0) return null;
                if (i) {
                    e.clear()
                }
                e.hash2Node[t.hashCode] = r;
                e.hash2DisplayObject[t.hashCode] = t;
                var s = t.getDisplayName();
                r.name = s;
                r.memberName = t.name;
                r.type = s;
                r.visible = t.visible && t.alpha != 0;
                r.rawHash = t.hashCode;
                var o = t;
                r.hasChildren = !!(o.numChildren && o.numChildren > 0);
                if (t.parent) r.parentHash = t.parent.hashCode;
                if (n > 0) {
                    e.parseChildren(t, r, n - 1)
                }
                r.updateIcon();
                return r
            };
            e.parseRawObject = function (t, r) {
                if (r === void 0) {
                    r = new e
                }
                return e.parseRawProps(t, 0, r)
            };
            e.getByHash = function (t) {
                return e.hash2Node[t]
            };
            e.clear = function () {
                e.hash2Node = {};
                e.hash2DisplayObject = {}
            };
            e.clone = function (t, r, i) {
                if (r === void 0) {
                    r = false
                }
                i = i || new e;
                var n = Object.getOwnPropertyNames(t);
                n.forEach(function (e) {
                    if (e == "events" || e == "_children" || e == "_props") return;
                    i[e] = t[e]
                });
                e.hash2Node[i.rawHash] = i;
                if (t._children.length > 0) i._children = t._children.map(function (t) {
                    return e.clone(t, false, e.getByHash(t.rawHash))
                });
                i.recover();
                r && i.trigger(e.Changed);
                return i
            };
            e.Show = "show";
            e.UnSelected = "unselected";
            e.OnSelected = "selected";
            e.ChildrenChange = "childrenchange";
            e.Changed = "changed";
            e.hash2Node = {};
            e.hash2DisplayObject = {};
            e.ignore = {
                _parent: 1,
                parent: 1,
                _stage: 1,
                stage: 1,
                _eventTarget: 1,
                _children: 1,
                _owner: 1,
                _rendererOwner: 1
            };
            e.selected = null;
            return e
        }(t.EventBase);
        t.TreeNode = e;
        var r = function () {
            function t() {
                this.dirtyCount = [];
                this.dirtyKey = {};
                this.init = false
            }
            t.prototype.push = function (t) {
                while (t != null) {
                    if (t.hashCode in this.dirtyKey) {
                        this.dirtyCount[this.dirtyKey[t.hashCode]] += 1;
                        break
                    } else if (this.init == false) {
                        var e = 0;
                        if (this.dirtyCount.length == 0) e = 1;
                        this.dirtyCount.push(e);
                        this.dirtyKey[t.hashCode] = this.dirtyCount.length - 1
                    }
                    t = t.parent
                }
                this.init = true
            };
            t.prototype.getRootHash = function () {
                for (var t = this.dirtyCount.length; t >= 0; t--) {
                    if (this.dirtyCount[t] > 0) {
                        break
                    }
                }
                for (var e in this.dirtyKey) {
                    if (this.dirtyKey[e] == t) return e
                }
            };
            t.prototype.reset = function () {
                this.dirtyCount = [];
                this.dirtyKey = {};
                this.init = false
            };
            return t
        }();
        t.TreeDirtyCache = r
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var EGRETRELEASE = true;
var egret;
(function (t) {
    var e;
    (function (t) {
        var e = function () {
            function t(t, e) {
                this.host = t;
                this.callbacks = {};
                this.namedCallbacks = {};
                this.key = null;
                this.getKey();
                this._connect(e)
            }
            t.prototype._connect = function (t) {};
            t.prototype.post = function (t, e, r) {
                if (e === void 0) {
                    e = null
                }
                var i = e;
                if (r) {
                    i = (performance.now() + Math.random() * 100).toString();
                    this.callbacks[i] = r
                }
                var n = {
                    id: i,
                    data: t,
                    key: this.key
                };
                this._doPost(n);
                return this
            };
            t.prototype._doPost = function (t) {
                this.port.postMessage(t)
            };
            t.prototype.on = function (t, e) {
                if (!this.namedCallbacks[t]) this.namedCallbacks[t] = [];
                this.namedCallbacks[t].push(e);
                return this
            };
            t.prototype.remove = function (t, e) {
                var r = this.namedCallbacks[t];
                if (r) {
                    var i = r.indexOf(e);
                    if (i < 0) return;
                    r.splice(i, 1)
                }
                return this
            };
            t.prototype.removeAll = function () {
                this.namedCallbacks = {};
                return this
            };
            t.prototype._parseMsgData = function (t) {
                return null
            };
            t.prototype._onMessage = function (t) {
                var e = this;
                var r = this._parseMsgData(t);
                var i = r.id;
                var n = r.data.name;
                var s = this.callbacks[i];
                if (s) {
                    s(r.data);
                    delete this.callbacks[i]
                }
                var o = this.namedCallbacks[n];
                if (o) {
                    o.forEach(function (t) {
                        var n = t(r.data, function (t) {
                            if (i) {
                                e.post(t, i)
                            }
                        });
                        if (i && n) {
                            e.post(n, i)
                        }
                    })
                }
            };
            t.prototype.getKey = function () {
                if (window.name == "") {
                    window.name = Date.now().toString()
                }
                this.key = window.name
            };
            return t
        }();
        t.PortBase = e
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var __extends = this && this.__extends || function (t, e) {
    for (var r in e)
        if (e.hasOwnProperty(r)) t[r] = e[r];

    function i() {
        this.constructor = t
    }
    t.prototype = e === null ? Object.create(e) : (i.prototype = e.prototype, new i)
};
var egret;
(function (t) {
    var e;
    (function (t) {
        var e = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments)
            }
            e.prototype._connect = function (t) {
                var e = this;
                var r = chrome.runtime.connect();
                r.onMessage.addListener(function (t) {
                    return e._onMessage(t)
                });
                this.port = r;
                t && window.setTimeout(t.bind(this), 0)
            };
            e.prototype._doPost = function (t) {
                this.port.postMessage(t)
            };
            e.prototype._parseMsgData = function (t) {
                return t
            };
            return e
        }(t.PortBase);
        t.ChromePort = e;
        var r = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments)
            }
            e.prototype._connect = function (t) {
                var e = this;
                var r = chrome.runtime.connect();
                r.onMessage.addListener(function (t) {
                    return e._onMessage(t)
                });
                this.port = r;
                window.addEventListener("message", function (t) {
                    return e._onWindowMessage(t.data)
                });
                t && window.setTimeout(t.bind(this), 0)
            };
            e.prototype._doPost = function (t) {
                this.port.postMessage(t)
            };
            e.prototype._parseMsgData = function (t) {
                return t
            };
            e.prototype._onMessage = function (e) {
                if (e.toContent) {
                    t.prototype._onMessage.call(this, e)
                } else {
                    window.postMessage(e, "*")
                }
            };
            e.prototype._onWindowMessage = function (t) {
                if (t["from"] == "stage") {
                    var e = JSON.parse(t.data);
                    this.post(e, t.id)
                }
            };
            return e
        }(t.PortBase);
        t.ContentPort = r;
        var i = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments)
            }
            e.prototype._connect = function (t) {
                var e = this;
                window.addEventListener("message", function (t) {
                    return e._onMessage(t)
                });
                t && window.setTimeout(t.bind(this), 0)
            };
            e.prototype._doPost = function (t) {
                window.postMessage({
                    from: "stage",
                    id: t.id,
                    data: JSON.stringify(t.data)
                }, "*")
            };
            e.prototype._parseMsgData = function (t) {
                return t.data
            };
            e.prototype._onMessage = function (e) {
                var r = this._parseMsgData(e);
                if (!r.data) return;
                if (r["from"] == "stage") return false;
                t.prototype._onMessage.call(this, e)
            };
            return e
        }(t.PortBase);
        t.StagePort = i;
        var n = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments)
            }
            e.prototype._connect = function (t) {
                var e = this;
                var r = new WebSocket("ws://" + this.host);
                this.port = r;
                r.addEventListener("message", function (t) {
                    return e._onMessage(t)
                });
                r.addEventListener("open", function (r) {
                    return t(e)
                })
            };
            e.prototype._doPost = function (t) {
                var e = this.port;
                e.send(JSON.stringify(t))
            };
            e.prototype._parseMsgData = function (t) {
                return JSON.parse(t.data)
            };
            return e
        }(t.PortBase);
        t.WsPort = n
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var egret;
(function (t) {
    var e;
    (function (t) {
        t.PortFactory = null
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var egret;
(function (t) {
    var e;
    (function (e) {
        var r = function () {
            function e() {}
            e.prototype.getStagePortClass = function () {
                return t.devtool.StagePort
            };
            e.prototype.getPanelPortClass = function () {
                return t.devtool.ChromePort
            };
            e.prototype.getExtContentPortClass = function () {
                return t.devtool.ContentPort
            };
            return e
        }();
        e.ChromePortFactory = r;
        e.PortFactory = new r
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var __extends = this && this.__extends || function (t, e) {
    for (var r in e)
        if (e.hasOwnProperty(r)) t[r] = e[r];

    function i() {
        this.constructor = t
    }
    t.prototype = e === null ? Object.create(e) : (i.prototype = e.prototype, new i)
};
var egret;
(function (t) {
    var e;
    (function (e) {
        var r = "devtool_showSelected";
        var i = "devtool_showHover";
        var n = "#00AA00";
        var s = "rgba(79, 169, 144, 0.13)";
        var o = "#AA0000";
        var a = "rgba(169, 0, 0, 0.5)";
        var h = "rgba(79, 92, 169, 0.88)";
        var l = "rgba(79, 92, 169, 0.13)";
        var c = function (e) {
            __extends(r, e);

            function r() {
                e.apply(this, arguments);
                this._tick = 0;
                this._totalDeltaTime = 0
            }
            r.prototype.run = function () {
                t.Ticker.getInstance().register(this.update, this)
            };
            r.prototype.update = function (t) {
                this._tick++;
                this._totalDeltaTime += t;
                if (this._totalDeltaTime >= r._maxDeltaTime) {
                    var e = Math.floor(this._tick * 1e3 / this._totalDeltaTime);
                    this.trigger("fps", e);
                    this._totalDeltaTime = 0;
                    this._tick = 0
                }
            };
            r.instance = null;
            r._maxDeltaTime = 500;
            return r
        }(t.devtool.EventBase);
        e.Profiler = c;
        var u = function () {
            function e() {}
            e.checkContainer = function (r, i, n) {
                var s;
                if (!r.visible) {
                    return null
                }
                if (r.scrollRect) {
                    if (i < r.scrollRect.x || n < r.scrollRect.y || i > r.scrollRect.x + r.scrollRect.width || n > r.scrollRect.y + r.scrollRect.height) {
                        return null
                    }
                } else if (r.mask) {
                    if (r.mask.x > i || i > r.mask.x + r.mask.width || r.mask.y > n || n > r.mask.y + r.mask.height) {
                        return null
                    }
                }
                var o = r._children;
                var a = o.length;
                var h = r._touchChildren;
                for (var l = a - 1; l >= 0; l--) {
                    var c = o[l];
                    var u = c._getMatrix();
                    var d = c.scrollRect;
                    if (d) {
                        u.append(1, 0, 0, 1, -d.x, -d.y)
                    }
                    u.invert();
                    var p = t.Matrix.transformCoords(u, i, n);
                    var f = p.x,
                        v = p.y;
                    var g = e.checkDispObject;
                    if (c instanceof t.DisplayObjectContainer) g = e.checkContainer;
                    var y = g(c, f, v);
                    if (y) {
                        if (!h) {
                            return r
                        }
                        return y
                    }
                }
                if (s) {
                    return s
                } else if (r._texture_to_render || r["_graphics"]) {
                    return e.checkDispObject(r, i, n)
                }
                return null
            };
            e.checkDispObject = function (e, r, i) {
                if (!e.visible) {
                    return null
                }
                var n = e._getSize(t.Rectangle.identity);
                if (!(0 <= r && r < n.width && 0 <= i && i < n.height)) {
                    return null
                }
                var s = e.mask || e.scrollRect;
                if (!s) return e;
                var o = [e.mask, e.scrollRect];
                var a = o.some(function (t) {
                    return t && r >= t.x && i >= t.y && r <= t.x + t.width && i <= t.y + t.height
                });
                return a ? e : null
            };
            e.find = function (t, r) {
                if (r.hashCode == t || r.name && r.name.toLowerCase().indexOf(t.toString().toLowerCase()) >= 0) return [r];
                var i = r.numChildren ? r : null;
                if (i == null) return null;
                var n = null;
                for (var s = 0; s < i.numChildren; s++) {
                    var o = i.getChildAt(s);
                    var a = e.find(t, o);
                    if (a) {
                        if (!n) n = a;
                        else n = n.concat(a)
                    }
                }
                return n
            };
            return e
        }();
        e.DisplayObjectLocator = u;
        var d = function () {
            function e(t, e, r) {
                if (r === void 0) {
                    r = 1
                }
                this.stageW = t;
                this.stageH = e;
                this.ratio = r
            }
            e.prototype.draw = function (e, r, i) {
                if (i === void 0) {
                    i = true
                }
                if (r == null) return;
                var o;
                if (e instanceof t.HTML5CanvasRenderer) {
                    o = e.canvasContext
                }
                var a = r.x;
                var c = r.y;
                var u = o.globalAlpha;
                o.save();
                o.globalAlpha = 1;
                var d = r._worldTransform;
                var p = this.ratio;
                o.setTransform(d.a, d.b, d.c, d.d, d.tx, d.ty);
                var f = 0,
                    v = 0;
                var g = {
                    x: 0,
                    y: 0,
                    width: r.width,
                    height: r.height
                };
                var y = i ? n : h;
                var m = i ? s : l;
                var w = r.mask || r.scrollRect;
                if (w) {
                    g.x = w.x;
                    g.y = w.y;
                    g.width = w.width;
                    g.height = w.height;
                    f += w.x;
                    v += w.y
                }
                this.drawRect(o, g, y, m);
                f = f + d.tx < 0 ? -f - d.tx : f;
                v = v + d.ty < 0 ? -v - d.ty : v;
                o.setTransform(1, 0, 0, 1, d.tx, d.ty);
                o.lineDashOffset = 0;
                var T = ["x:", Math.round(a), ",y:", Math.round(c), ",w:", Math.round(r.width), ",h:", Math.round(r.height)].join("");
                o.fillStyle = "#333";
                o.lineWidth = 1;
                o.globalAlpha = .6;
                o.font = 12 * p + "px Consolas,Courier New, Courier, monospace";
                o.fillRect(f, v, o.measureText(T).width + 10, 16 * p);
                o.fillStyle = "#FFF";
                o.globalAlpha = 1;
                o.fillText(T, f + 5 * p, v + 12 * p);
                o.closePath();
                o.setTransform(1, 0, 0, 1, 0, 0);
                o.restore();
                o.globalAlpha = u
            };
            e.prototype.drawRect = function (t, e, r, i) {
                t.fillStyle = i;
                t.beginPath();
                t.fillRect(e.x, e.y, e.width, e.height);
                t.closePath();
                t.beginPath();
                t.strokeStyle = r;
                t.lineWidth = 1;
                t.strokeRect(e.x, e.y, e.width, e.height)
            };
            return e
        }();
        e.Pen = d;
        var p = function (e) {
            __extends(r, e);

            function r(r, i, n) {
                if (n === void 0) {
                    n = 1
                }
                e.call(this, r, i, n);
                this.stageW = r;
                this.stageH = i;
                this.ratio = n;
                this.tipTextField = new t.TextField;
                this.graphicsPoints = null;
                this.graphicsIndices = null;
                this.graphicsBuffer = null;
                this.graphicsIndexBuffer = null;
                this.tipTextField.textColor = 16777215;
                this.tipTextField.size = 12 * n;
                this.tipTextField.fontFamily = "Consolas,Courier New, Courier, monospace";
                this.tipTextField._parentChanged(new t.DisplayObjectContainer);
                this.glRenderer = t.MainContext.instance.rendererContext
            }
            r.prototype.draw = function (e, r, i) {
                if (i === void 0) {
                    i = true
                }
                if (r == null) return;
                var o;
                if (e instanceof t.WebGLRenderer) o = e;
                var a = r.x;
                var c = r.y;
                var u = r._worldTransform;
                var d = 1;
                o.setTransform(u);
                var p = 0,
                    f = 0;
                var v = i ? {
                    r: 79 / 255,
                    g: 169 / 255,
                    b: 144 / 255,
                    a: .2
                } : {
                    r: 79 / 255,
                    g: 96 / 255,
                    b: 169 / 255,
                    a: .2
                };
                var g = {
                    x: 0,
                    y: 0,
                    w: r.width,
                    h: r.height,
                    r: v.r,
                    g: v.g,
                    b: v.b,
                    a: v.a
                };
                var y = i ? n : h;
                var m = i ? s : l;
                var w = r.mask || r.scrollRect;
                if (w) {
                    g.x = w.x;
                    g.y = w.y;
                    g.w = w.width;
                    g.h = w.height;
                    p += w.x;
                    f += w.y
                }
                var T = {
                    x: g.x,
                    y: g.y,
                    w: g.w,
                    h: g.h
                };
                this.drawRect(g);
                g.a = 1;
                g.w = 1;
                this.drawRect(g);
                g.x += T.w;
                this.drawRect(g);
                g.x -= T.w;
                g.h = 1;
                g.w = T.w + 1;
                this.drawRect(g);
                g.y += T.h;
                this.drawRect(g);
                p = u.tx;
                f = u.ty;
                var x = new t.Matrix(1, 0, 0, 1, u.tx, u.ty);
                this.glRenderer.setTransform(x);
                var _ = ["x:", Math.round(a), ",y:", Math.round(c), ",w:", Math.round(r.width), ",h:", Math.round(r.height)].join("");
                if (this.tipTextField.text != _) {
                    this.tipTextField.text = _
                }
                this.tipTextField.x = p;
                this.tipTextField.y = f;
                this.drawRect({
                    x: 0,
                    y: 0,
                    w: this.tipTextField.width,
                    h: this.tipTextField.height,
                    r: 0,
                    g: 0,
                    b: 0,
                    a: .6
                });
                this.tipTextField._draw(this.glRenderer);
                this.glRenderer["_drawWebGL"]()
            };
            r.prototype.drawRect = function (t) {
                this.renderGraphics(t)
            };
            r.prototype.renderGraphics = function (t) {
                var e = this.glRenderer["gl"];
                var r = this.glRenderer["shaderManager"].primitiveShader;
                if (!this.graphicsPoints) {
                    this.graphicsPoints = [];
                    this.graphicsIndices = [];
                    this.graphicsBuffer = e.createBuffer();
                    this.graphicsIndexBuffer = e.createBuffer()
                } else {
                    this.graphicsPoints.length = 0;
                    this.graphicsIndices.length = 0
                }
                this.updateGraphics(t);
                this.glRenderer["shaderManager"].activateShader(r);
                e.blendFunc(e.ONE, e.ONE_MINUS_SRC_ALPHA);
                e.uniformMatrix3fv(r.translationMatrix, false, this.glRenderer["worldTransform"].toArray(true));
                e.uniform2f(r.projectionVector, this.glRenderer["projectionX"], -this.glRenderer["projectionY"]);
                e.uniform2f(r.offsetVector, 0, 0);
                e.uniform3fv(r.tintColor, [1, 1, 1]);
                e.uniform1f(r.alpha, t.a);
                e.bindBuffer(e.ARRAY_BUFFER, this.graphicsBuffer);
                e.vertexAttribPointer(r.aVertexPosition, 2, e.FLOAT, false, 4 * 6, 0);
                e.vertexAttribPointer(r.colorAttribute, 4, e.FLOAT, false, 4 * 6, 2 * 4);
                e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this.graphicsIndexBuffer);
                e.drawElements(e.TRIANGLE_STRIP, this.graphicsIndices.length, e.UNSIGNED_SHORT, 0);
                this.glRenderer["shaderManager"].activateShader(this.glRenderer["shaderManager"].defaultShader)
            };
            r.prototype.updateGraphics = function (t) {
                var e = this.glRenderer["gl"];
                this.buildRectangle(t);
                e.bindBuffer(e.ARRAY_BUFFER, this.graphicsBuffer);
                e.bufferData(e.ARRAY_BUFFER, new Float32Array(this.graphicsPoints), e.STATIC_DRAW);
                e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, this.graphicsIndexBuffer);
                e.bufferData(e.ELEMENT_ARRAY_BUFFER, new Uint16Array(this.graphicsIndices), e.STATIC_DRAW)
            };
            r.prototype.buildRectangle = function (t) {
                var e = t.x;
                var r = t.y;
                var i = t.w;
                var n = t.h;
                var s = t.r;
                var o = t.g;
                var a = t.b;
                var h = 1;
                var l = this.graphicsPoints;
                var c = this.graphicsIndices;
                var u = l.length / 6;
                l.push(e, r);
                l.push(s, o, a, h);
                l.push(e + i, r);
                l.push(s, o, a, h);
                l.push(e, r + n);
                l.push(s, o, a, h);
                l.push(e + i, r + n);
                l.push(s, o, a, h);
                c.push(u, u, u + 1, u + 2, u + 3, u + 3)
            };
            return r
        }(d);
        e.GlPen = p;
        var f = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments)
            }
            return e
        }(d);
        e.CanvasPen = f;
        var v = function (e) {
            __extends(r, e);

            function r() {
                var r = this;
                e.apply(this, arguments);
                this.highlightHover = false;
                this.highlightClick = true;
                this.executeMouseEvents = true;
                this.onMouseMove = function (e) {
                    if (r.highlightHover == false) return;
                    var i = r.translate(e);
                    var n = t.MainContext.instance.stage;
                    var s = u.checkContainer(n, i.x, i.y);
                    if (!s || s == r.hovered || s == t.MainContext.instance.stage) return;
                    r.hovered = s
                };
                this.onMouseOut = function (t, e) {
                    if (e === void 0) {
                        e = false
                    }
                    r.hovered = null
                };
                this.onMouseDown = function (e) {
                    if (r.highlightClick == false) return;
                    var i = r.translate(e);
                    var n = t.MainContext.instance.stage;
                    var s = u.checkContainer(n, i.x, i.y);
                    if (!s || s == r.selected) return;
                    r.selected = s
                }
            }
            Object.defineProperty(r.prototype, "hovered", {
                get: function () {
                    return this._hovered
                },
                set: function (t) {
                    if (t == this._hovered) return;
                    this._hovered = t;
                    this.trigger("hovered", t)
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(r.prototype, "selected", {
                get: function () {
                    return this._selected
                },
                set: function (t) {
                    if (t == this._selected) return;
                    this._selected = t;
                    if (t) this.trigger("selected", t)
                },
                enumerable: true,
                configurable: true
            });
            r.prototype.init = function () {
                var e = document.getElementById(t.StageDelegate.canvas_div_name);
                this.div = e;
                this.target_div = e;
                this.div.addEventListener("mousedown", this.onMouseDown);
                this.div.addEventListener("mousemove", this.onMouseMove);
                this.div.addEventListener("mouseleave", this.onMouseOut);
                this.div.addEventListener("MSPointerDown", this.onMouseDown, true);
                this.div.addEventListener("MSPointerMove", this.onMouseMove, true);
                this.div.addEventListener("touchstart", this.onMouseDown);
                this.div.addEventListener("touchmove", this.onMouseMove);
                this.div.addEventListener("touchcancel", this.onMouseOut);
                this.divPosition = this.target_div.getBoundingClientRect();
                return this
            };
            r.prototype.reset = function () {
                this.div.removeEventListener("mousedown", this.onMouseDown);
                this.div.removeEventListener("mousemove", this.onMouseMove);
                this.div.removeEventListener("mouseleave", this.onMouseOut)
            };
            r.prototype.translate = function (e) {
                var r = t.HTML5TouchContext.prototype;
                if (e.touches) {
                    e = e.touches[0]
                }
                return r.getLocation(this.target_div, e)
            };
            r.prototype.preventTouch = function (t) {
                this.executeMouseEvents = !t
            };
            return r
        }(t.devtool.EventBase);
        e.Mask = v;
        var g = function (r) {
            __extends(i, r);

            function i() {
                r.apply(this, arguments);
                this.renderCost = {};
                this.textureCanvas = null;
                this.textureOptions = {
                    ratio: 1,
                    stageW: 400,
                    stageH: 800,
                    textureCanvas: this.textureCanvas,
                    textureCtx: this.textureCtx,
                    bufferTexture: this.bufferTexture
                };
                this.textureCtx = null;
                this.lastSelected = null;
                this.lastHovered = null;
                this._rawDraw = null;
                this._mask = null;
                this._antOffset = 0;
                this._preventTouch = false;
                this.performance = window.performance
            }
            i.attach = function (t) {
                if (i.instance == null) {
                    i.instance = new i
                }
                i.instance.attach(t)
            };
            i.show = function (t) {
                i.instance.show(t)
            };
            i.prototype.attach = function (r) {
                var i = this;
                var n = this;
                var s = t.MainContext.instance;
                this._mask = (new v).init();
                this._mask.on("selected", function (t) {
                    return i.show(t, e.TartgetType.active)
                });
                this._mask.on("hovered", function (t) {
                    return i.show(t, e.TartgetType.hover)
                });
                var o = e.Profiler.instance || new e.Profiler;
                o.removeAllEvents();
                o.on("fps", function (t) {
                    i.trigger("fps", t)
                });
                r.addEventListener(t.TouchEvent.LEAVE_STAGE, function (t) {
                    return i.lastHovered = null
                }, this);
                r.addEventListener(t.Event.REMOVED, function (t) {
                    var e = t.target;
                    i.trigger("displayObjectRemoved", e)
                }, this);
                var a = s.rendererContext.onRenderFinish;
                s.rendererContext.onRenderFinish = function () {
                    a.call(this);
                    n._drawTarget()
                };
                this.textureCanvas = document.createElement("canvas");
                var h = document.getElementById(t.StageDelegate.canvas_name);
                var l = t.MainContext.instance.stage.stageWidth,
                    c = t.MainContext.instance.stage.stageHeight;
                var u = Math.max(c, l);
                var d = u > 1200 ? Math.round(u / 800) : 1;
                var g = s.rendererContext instanceof t.WebGLRenderer;
                this.pen = g ? new p(l, c, d) : new f(l, c, d);
                this.textureCtx = this.textureCanvas.getContext("2d");
                this.textureCtx.font = 12 * d + "px Consolas,Courier New, Courier, monospace";
                this.textureCanvas.width = l / d;
                this.textureCanvas.height = c / d;
                this.textureOptions.ratio = d;
                this.textureOptions.stageH = c;
                this.textureOptions.stageW = l;
                var y = s.touchContext.onTouchBegan;
                s.touchContext.onTouchBegan = function (t, e, r) {
                    if (n._preventTouch) return;
                    y.call(this, t, e, r)
                };
                e.Profiler.instance = o;
                o.run()
            };
            i.prototype.detach = function (t) {
                this.lastSelected = null;
                this.lastHovered = null;
                this._mask.reset()
            };
            i.prototype.show = function (t, r) {
                if (r === void 0) {
                    r = e.TartgetType.hover
                }
                var i = t;
                var n = r == e.TartgetType.hover;
                if (n) {
                    this.lastHovered = i;
                    this._mask._hovered = i
                } else {
                    this.lastSelected = i;
                    this._mask._selected = i
                }
                if (!n) this.trigger("selected", i)
            };
            i.prototype.getLastSelected = function () {
                return this.lastSelected && this.lastSelected.stage ? this.lastSelected : undefined
            };
            i.prototype.highlightType = function (t, r) {
                if (e.TartgetType.active == t) this.highlightClick = r;
                if (e.TartgetType.hover == t) this.highlightHover = r
            };
            i.prototype.preventTouch = function (t) {
                this._preventTouch = t;
                this._mask.preventTouch(t)
            };
            i.prototype.update = function () {};
            i.prototype._drawTarget = function () {
                var e = t.MainContext.instance.rendererContext;
                this.pen.draw(e, this.lastSelected, true);
                this.pen.draw(e, this.lastHovered, false)
            };
            i.prototype._rewriteStageEvents = function () {};
            i.prototype._rewriteDraw = function () {
                if (t.DisplayObject.prototype["rewrite"]) return;
                this._rawDraw = t.DisplayObject.prototype._draw;
                var e = this;
                var r = function (t) {
                    var r = this;
                    var i = e.performance.now();
                    e._rawDraw.call(this, t);
                    var n = e.performance.now();
                    var s = n - i;
                    e.renderCost[r.hashCode] = s
                };
                t.DisplayObject.prototype._draw = r;
                t.DisplayObject.prototype["rewrite"] = true
            };
            Object.defineProperty(i.prototype, "highlightHover", {
                set: function (t) {
                    this._mask.highlightHover = t;
                    if (!t) {
                        this.lastHovered = null;
                        this._mask._hovered = null
                    }
                },
                enumerable: true,
                configurable: true
            });
            Object.defineProperty(i.prototype, "highlightClick", {
                set: function (t) {
                    this._mask.highlightClick = t;
                    if (!t) {
                        this.lastSelected = null;
                        this._mask._selected = null
                    }
                },
                enumerable: true,
                configurable: true
            });
            i.instance = null;
            return i
        }(t.devtool.EventBase);
        e.Inspector = g
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var __extends = this && this.__extends || function (t, e) {
    for (var r in e)
        if (e.hasOwnProperty(r)) t[r] = e[r];

    function i() {
        this.constructor = t
    }
    t.prototype = e === null ? Object.create(e) : (i.prototype = e.prototype, new i)
};
var egret;
(function (t) {
    var e;
    (function (e) {
        window["lark"] = window["lark"] || {};
        if (!lark.Sprite) {
            lark["Sprite"] = function () {}
        }(function (t) {
            t[t["active"] = 0] = "active";
            t[t["hover"] = 1] = "hover"
        })(e.TartgetType || (e.TartgetType = {}));
        var r = e.TartgetType;
        var i = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments);
                this.profiler = new o;
                this.mask = new s;
                this._preventTouch = false
            }
            e.prototype.attach = function (t) {
                var e = this;
                this.stage = t;
                t.addChild(this.mask);
                t.on(lark.TouchEvent.TOUCH_BEGIN, this.touchHandler, this, true, 9999);
                t.on(lark.TouchEvent.TOUCH_END, this.touchHandler, this, true, 9999);
                t.on(lark.TouchEvent.TOUCH_MOVE, this.touchHandler, this, true, 9999);
                t.on(lark.Event.ENTER_FRAME, this.enterFrameHandler, this, false, 9999);
                this.profiler.run();
                this.profiler.on("fps", function (t) {
                    return e.trigger("fps", t)
                })
            };
            e.prototype.detach = function () {
                this.stage.removeChild(this.mask);
                this.stage.removeListener(lark.TouchEvent.TOUCH_BEGIN, this.touchHandler, this, true);
                this.stage.removeListener(lark.TouchEvent.TOUCH_END, this.touchHandler, this, true);
                this.stage.removeListener(lark.TouchEvent.TOUCH_MOVE, this.touchHandler, this, true);
                this.stage.removeListener(lark.Event.ENTER_FRAME, this.enterFrameHandler, this, false);
                this.profiler.stop()
            };
            e.prototype.show = function (t, e) {
                if (e === void 0) {
                    e = r.hover
                }
                var i = t;
                this.mask.setTarget(i, e);
                if (e == r.active) this.trigger("selected", t)
            };
            e.prototype.getLastSelected = function () {
                return this.mask.targets[r.active]
            };
            e.prototype.highlightType = function (t, e) {
                if (e === void 0) {
                    e = true
                }
                this.mask.highlight[t] = !!e
            };
            e.prototype.preventTouch = function (t) {
                this._preventTouch = t
            };
            e.prototype.touchHandler = function (t) {
                if (this._preventTouch) {
                    t.preventDefault();
                    t.stopImmediatePropagation()
                }
                var e = t.target;
                if (t.type == lark.TouchEvent.TOUCH_BEGIN) {
                    this.mask.setTarget(e, r.active);
                    this.trigger("selected", e)
                }
                if (t.type == lark.TouchEvent.TOUCH_MOVE) {
                    this.mask.setTarget(e, r.hover)
                }
            };
            e.prototype.enterFrameHandler = function () {
                this.mask.drawTargets()
            };
            return e
        }(e.EventBase);
        e.LarkInspector = i;
        var n = {
            0: ["rgba(0,200,0,0.3)", "rgba(0,200,0,0.5)"],
            1: ["rgba(0,0,150,0.3)", "rgba(0,0,150,0.5)"]
        };
        var s = function (t) {
            __extends(e, t);

            function e() {
                t.call(this);
                this.shape = new lark.Shape;
                this.metrics = new lark.TextField;
                this.targets = {};
                this.highlight = {};
                this.name = "$LarkMetricMask";
                this.shape.touchEnabled = false;
                this.addChild(this.shape);
                this.metrics.fontFamily = "monospace";
                this.metrics.fontSize = 12;
                this.metrics.touchEnabled = false;
                this.addChild(this.metrics);
                this.touchEnabled = false
            }
            e.prototype.setTarget = function (t, e) {
                if (e === void 0) {
                    e = r.active
                }
                this.targets[e] = t;
                this.drawTargets()
            };
            e.prototype.drawTargets = function () {
                this.metrics.visible = false;
                var t = this.shape.graphics;
                t.clear();
                var e = false;
                for (var i in this.targets) {
                    var n = this.highlight[i] == false;
                    if (n) continue;
                    this.drawTarget(this.targets[i], i);
                    e = true
                }
                if (e) this.showMetrics(this.targets[r.active])
            };
            e.prototype.showMetrics = function (t) {
                if (!t) return;
                this.metrics.visible = true;
                var e = t.$getOriginalBounds();
                var r = t.localToGlobal(e.x, e.y).clone();
                var i = "x:" + t.x.toFixed(0) + ",y:" + t.y.toFixed(0) + ",w:" + t.width.toFixed(0) + ",h:" + t.height.toFixed(0);
                r.x = Math.max(r.x, 0);
                r.y = Math.max(r.y, 0);
                this.metrics.x = r.x + 2;
                this.metrics.y = r.y + 2;
                this.metrics.text = i;
                var n = this.shape.graphics;
                var s = this.metrics.textWidth + 4;
                var o = this.metrics.textHeight + 4;
                var a = {
                    x: r.x - .5,
                    y: r.y - .5
                };
                n.moveTo(a.x, a.y);
                n.beginPath();
                n.lineTo(a.x + s, a.y);
                n.lineTo(a.x + s, a.y + o);
                n.lineTo(a.x, a.y + o);
                n.lineTo(a.x, a.y);
                n.closePath();
                n.fillStyle = "rgba(243, 241, 189, 0.7)";
                n.fill();
                n.lineCap = "butt";
                n.lineWidth = 1;
                n.strokeStyle = "rgba(243, 241, 189, 0.9)";
                n.stroke()
            };
            e.prototype.drawTarget = function (t, e) {
                var r = t.$getOriginalBounds();
                var i = r.width,
                    s = r.height;
                var o = t.localToGlobal(r.x, r.y),
                    a = t.localToGlobal(r.x + i, r.y),
                    h = t.localToGlobal(r.x + i, r.y + s),
                    l = t.localToGlobal(r.x, r.y + s);
                var c = n[e];
                var u = this.shape.graphics;
                u.moveTo(o.x - .5, o.y - .5);
                u.beginPath();
                u.lineTo(a.x - .5, a.y - .5);
                u.lineTo(h.x - .5, h.y - .5);
                u.lineTo(l.x - .5, l.y - .5);
                u.lineTo(o.x - .5, o.y - .5);
                u.closePath();
                u.fillStyle = c[0];
                u.fill();
                u.lineCap = "butt";
                u.lineWidth = 1;
                u.strokeStyle = c[1];
                u.stroke()
            };
            return e
        }(lark.Sprite);
        e.MetricMask = s;
        var o = function (t) {
            __extends(e, t);

            function e() {
                t.apply(this, arguments);
                this.tick = 0;
                this.lastTime = 0
            }
            e.prototype.run = function () {
                lark.startTick(this.update, this)
            };
            e.prototype.stop = function () {
                lark.stopTick(this.update, this);
                this.removeAllEvents()
            };
            e.prototype.update = function (t) {
                this.tick++;
                if (t - this.lastTime >= e.maxDeltaTime) {
                    var r = Math.floor(this.tick * 1e3 / (t - this.lastTime));
                    this.trigger("fps", r);
                    this.lastTime = t;
                    this.tick = 0
                }
                return false
            };
            e.instance = null;
            e.maxDeltaTime = 500;
            return e
        }(t.devtool.EventBase);
        e.LarkProfiler = o
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var a = [1, 2, 3];
Object.defineProperty(Array.prototype, "toAllString", {
    value: function () {
        return ""
    }
});
var __extends = this.__extends || function (t, e) {
    for (var r in e)
        if (e.hasOwnProperty(r)) t[r] = e[r];

    function i() {
        this.constructor = t
    }
    i.prototype = e.prototype;
    t.prototype = new i
};
var egret;
(function (t) {
    var e;
    (function (e) {
        window["egret"] = window["egret"] || {};
        if (!t.Sprite) {
            t["Sprite"] = function () {}
        }

        function r(e, r, i) {
            Object.defineProperty(e, r, {
                get: function () {
                    return i
                },
                set: function (i) {
                    console.error("属性是只读的：", t.getQualifiedClassName(e), r)
                },
                enumerable: true,
                configurable: true
            })
        }
        var i = function (i) {
            __extends(s, i);

            function s() {
                i.apply(this, arguments);
                this.mask = new a;
                this._preventTouch = false
            }
            s.prototype.attach = function (t) {
                var e = this;
                this.stage = t;
                var i = t.getChildByName("$LarkMetricMask");
                if (i) {
                    t.removeChild(i)
                }
                t.addChild(this.mask);
                this.addListeners();
                this.profiler = h.instance || new h;
                h.instance = this.profiler;
                this.profiler.removeAllEvents();
                this.profiler.run(t);
                this.profiler.on("fps", function (t) {
                    return e.trigger("fps", t)
                });
                r(t, "alpha", 1);
                r(t, "visible", true);
                r(t, "x", 0);
                r(t, "y", 0);
                r(t, "scaleX", 1);
                r(t, "scaleY", 1);
                r(t, "rotation", 0);
                r(t, "cacheAsBitmap", false);
                r(t, "scrollRect", null);
                r(t, "filters", null);
                r(t, "blendMode", null);
                r(t, "touchEnabled", true);
                r(t, "matrix", null)
            };
            s.prototype.detach = function () {
                this.stage.removeChild(this.mask);
                this.profiler.stop();
                this.removeListeners()
            };
            s.prototype.addListeners = function () {
                this.removeListeners();
                this.stage.addEventListener(t.TouchEvent.TOUCH_BEGIN, this.touchHandler, this, true, 9999);
                this.stage.addEventListener(t.TouchEvent.TOUCH_END, this.touchHandler, this, true, 9999);
                this.stage.addEventListener(t.TouchEvent.TOUCH_MOVE, this.touchHandler, this, true, 9999);
                this.stage.addEventListener(t.Event.ENTER_FRAME, this.enterFrameHandler, this, false, 9999)
            };
            s.prototype.removeListeners = function () {
                this.stage.removeEventListener(t.TouchEvent.TOUCH_BEGIN, this.touchHandler, this, true);
                this.stage.removeEventListener(t.TouchEvent.TOUCH_END, this.touchHandler, this, true);
                this.stage.removeEventListener(t.TouchEvent.TOUCH_MOVE, this.touchHandler, this, true);
                this.stage.removeEventListener(t.Event.ENTER_FRAME, this.enterFrameHandler, this, false)
            };
            s.prototype.show = function (t, r) {
                if (r === void 0) {
                    r = e.TartgetType.hover
                }
                var i = t;
                this.mask.setTarget(i, r);
                if (r == e.TartgetType.active) this.trigger("selected", t)
            };
            s.prototype.getLastSelected = function () {
                return this.mask.targets[e.TartgetType.active]
            };
            s.prototype.highlightType = function (t, r) {
                if (r === void 0) {
                    r = true
                }
                r = !!r;
                this.mask.highlight[t] = r;
                if (!r) this.mask.setTarget(null, t);
                if (this.mask.highlight[e.TartgetType.active] || this.mask.highlight[e.TartgetType.hover]) this.addListeners();
                else this.removeListeners()
            };
            s.prototype.preventTouch = function (t) {
                this._preventTouch = t
            };
            s.prototype.touchHandler = function (r) {
                if (this._preventTouch) {
                    r.preventDefault();
                    r.stopImmediatePropagation()
                }
                var i = r.target;
                if (i == this.stage) {
                    var s = n(i, r.stageX, r.stageY);
                    if (s) i = s
                }
                if (r.type == t.TouchEvent.TOUCH_BEGIN) {
                    this.mask.setTarget(i, e.TartgetType.active);
                    this.trigger("selected", i)
                }
                if (r.type == t.TouchEvent.TOUCH_MOVE) {
                    this.mask.setTarget(i, e.TartgetType.hover)
                }
            };
            s.prototype.enterFrameHandler = function () {
                this.mask.drawTargets()
            };
            return s
        }(e.EventBase);
        e.Egret2xInspector = i;

        function n(t, e, r) {
            if (!t.visible) {
                return null
            }
            var i = t.$getInvertedConcatenatedMatrix();
            var n = i.a * e + i.c * r + i.tx;
            var o = i.b * e + i.d * r + i.ty;
            var a = t.$scrollRect ? t.$scrollRect : t.$maskRect;
            if (a && !a.contains(n, o)) {
                return null
            }
            if (this.$mask && !t.$mask.$hitTest(e, r)) {
                return null
            }
            var h = t.$children;
            var l = false;
            for (var c = h.length - 1; c >= 0; c--) {
                var u = h[c];
                if (u.$maskedObject) {
                    continue
                }
                var d = s.call(u, e, r);
                if (d && d.ispTouchThrough !== true) {
                    l = true;
                    break
                }
            }
            if (d) {
                if (t.$touchChildren) {
                    return d
                }
                return t
            }
            if (l) {
                return t
            }
            return s.call(t, e, r, true)
        }

        function s(t, e, r) {
            if (r === void 0) {
                r = false
            }
            if (this.$children && !r) return n(this, t, e);
            if (!this.$renderRegion || !this.$visible) {
                return null
            }
            var i = this.$getInvertedConcatenatedMatrix();
            var s = this.$getContentBounds();
            var o = i.a * t + i.c * e + i.tx;
            var a = i.b * t + i.d * e + i.ty;
            if (s.contains(o, a)) {
                if (!this.$children) {
                    var h = this.$scrollRect ? this.$scrollRect : this.$maskRect;
                    if (h && !h.contains(o, a)) {
                        return null
                    }
                    if (this.$mask && !this.$mask.$hitTest(t, e)) {
                        return null
                    }
                }
                return this
            }
            return null
        }
        var o = {
            0: [51200, 51200],
            1: [150, 150]
        };
        var a = function (r) {
            __extends(i, r);

            function i() {
                r.call(this);
                this.shape = new t.Shape;
                this.metrics = new t.TextField;
                this.targets = {};
                this.highlight = {};
                this.ispTouchThrough = true;
                this.isFPS = true;
                this.name = "$LarkMetricMask";
                this.shape.touchEnabled = false;
                this.shape["ispTouchThrough"] = true;
                this.addChild(this.shape);
                this.metrics.fontFamily = "monospace";
                this.metrics.size = 12;
                this.metrics.textColor = 3355443;
                this.metrics.touchEnabled = false;
                this.metrics["ispTouchThrough"] = true;
                this.addChild(this.metrics);
                this.touchEnabled = false
            }
            i.prototype.setTarget = function (t, r) {
                if (r === void 0) {
                    r = e.TartgetType.active
                }
                if (!t) delete this.targets[r];
                else this.targets[r] = t;
                this.drawTargets()
            };
            i.prototype.drawTargets = function () {
                this.metrics.visible = false;
                var t = this.shape.graphics;
                t.clear();
                var r = false;
                for (var i in this.targets) {
                    var n = this.highlight[i] == false;
                    if (n) continue;
                    this.drawTarget(this.targets[i], i);
                    r = true
                }
                if (r) this.showMetrics(this.targets[e.TartgetType.active])
            };
            i.prototype.showMetrics = function (t) {
                if (!t) return;
                this.metrics.visible = true;
                var e = t["$getOriginalBounds"]();
                var r = {
                    x: 0,
                    y: 0
                };
                if (t.scrollRect) {
                    r.x = t.scrollRect.x;
                    r.y = t.scrollRect.y
                }
                if (t.mask) {
                    r.x = t.mask.x;
                    r.y = t.mask.y
                }
                var i = t.localToGlobal(r.x, r.y).clone();
                var n = "x:" + t.x.toFixed(0) + ",y:" + t.y.toFixed(0) + ",w:" + t.width.toFixed(0) + ",h:" + t.height.toFixed(0);
                i.x = Math.max(i.x, 0);
                i.y = Math.max(i.y - 18, 0);
                this.metrics.x = i.x + 2;
                this.metrics.y = i.y + 2;
                this.metrics.text = n;
                var s = this.shape.graphics;
                var o = this.metrics.textWidth + 4;
                var a = this.metrics.textHeight + 4;
                var h = {
                    x: i.x - .5,
                    y: i.y - .5
                };
                s.moveTo(h.x, h.y);
                s.lineStyle(1, 15987133, .9);
                s.beginFill(15987133, .7);
                s.lineTo(h.x + o, h.y);
                s.lineTo(h.x + o, h.y + a);
                s.lineTo(h.x, h.y + a);
                s.lineTo(h.x, h.y);
                s.endFill()
            };
            i.prototype.drawTarget = function (t, e) {
                var r = {
                    x: 0,
                    y: 0
                };
                if (t.scrollRect) {
                    r.x = t.scrollRect.x;
                    r.y = t.scrollRect.y
                }
                if (t.mask) {
                    r.x = t.mask.x;
                    r.y = t.mask.y
                }
                var i = t.width,
                    n = t.height;
                var s = t.localToGlobal(r.x, r.y),
                    a = t.localToGlobal(r.x + i, r.y),
                    h = t.localToGlobal(r.x + i, r.y + n),
                    l = t.localToGlobal(r.x, r.y + n);
                var c = o[e];
                var u = this.shape.graphics;
                u.moveTo(s.x - .5, s.y - .5);
                u.lineStyle(1, c[0], .5);
                u.beginFill(c[0], .2);
                u.lineTo(a.x - .5, a.y - .5);
                u.lineTo(h.x - .5, h.y - .5);
                u.lineTo(l.x - .5, l.y - .5);
                u.lineTo(s.x - .5, s.y - .5);
                u.endFill()
            };
            return i
        }(t.Sprite);
        e.EgretMetricMask = a;
        var h = function (e) {
            __extends(r, e);

            function r() {
                e.apply(this, arguments);
                this.tick = 0;
                this.lastTime = 0
            }
            r.prototype.run = function (e) {
                e.addEventListener(t.Event.ENTER_FRAME, this.update, this);
                this.stage = e
            };
            r.prototype.stop = function () {
                this.stage = null;
                this.stage.removeEventListener(t.Event.ENTER_FRAME, this.update, this);
                this.removeAllEvents()
            };
            r.prototype.update = function () {
                var t = Date.now();
                this.tick++;
                if (t - this.lastTime >= r.maxDeltaTime) {
                    var e = Math.floor(this.tick * 1e3 / (t - this.lastTime));
                    this.trigger("fps", e);
                    this.lastTime = t;
                    this.tick = 0
                }
                return false
            };
            r.instance = null;
            r.maxDeltaTime = 500;
            return r
        }(t.devtool.EventBase);
        e.Egret2xProfiler = h
    })(e = t.devtool || (t.devtool = {}))
})(egret || (egret = {}));
var currentStage;
var currentInspector;
var egret;
(function (egret) {
    var devtool;
    (function (devtool) {
        var rootDiv;
        var Main = function () {
            function Main() {
                var t = this;
                this.tree = null;
                this.showMethods = false;
                this.showPrivate = true;
                this.treeDirtyCache = new devtool.TreeDirtyCache;
                this.linkAndShow = function (e) {
                    var r = null;
                    if (devtool.TreeNode.isLinked(e) == false) {
                        r = devtool.TreeNode.linkToIt(e)
                    }
                    t.showItInTree(e.hashCode, r)
                };
                this.search = function (e, r) {
                    if (!e.option) return;
                    var i = e.option.name;
                    var n = e.option.current;
                    var s = devtool.DisplayObjectLocator.find(i, egret.MainContext.instance.stage);
                    if (s == null || s.length == 0) {
                        r([]);
                        return
                    }
                    var o = null;
                    if (n) {
                        var a = 0;
                        while (a < s.length) {
                            if (s[a].hashCode == n) break;
                            a++
                        }
                        a++;
                        if (a >= s.length) {
                            a = 0
                        }
                        o = s[a]
                    } else o = s[0];
                    t.linkAndShow(o);
                    t.showTreeSelection(o.hashCode);
                    r({
                        current: o.hashCode,
                        results: s.map(function (t) {
                            return t.hashCode
                        })
                    })
                }
            }
            Main.prototype.init = function () {
                var _this = this;
                window.setTimeout(function () {
                    return _this.refresh()
                }, 200);
                var isp = currentInspector;
                isp.removeAllEvents();
                isp.on("selected", this.linkAndShow).on("fps", function (t) {
                    _this.port.post({
                        name: "fps",
                        data: t
                    })
                });
                var port = this.port;
                isp.preventTouch(Main.preventTouch);
                port.removeAll();
                port.on("showTreeSelection", function (t) {
                    return _this.showTreeSelection(t.data, t.isHover)
                });
                port.on("preventTouch", function (t) {
                    var e = t.data;
                    Main.preventTouch = e;
                    _this.preventTouch(e)
                });
                port.on("highlightHover", function (t) {
                    isp.highlightType(devtool.TartgetType.hover, t.data)
                });
                port.on("highlightClick", function (t) {
                    isp.highlightType(devtool.TartgetType.active, t.data)
                });
                port.on("showMethodsChanged", function (t) {
                    _this.showMethods = t.showMethods;
                    t.hash && _this.showItInTree(t.hash)
                });
                port.on("showPrivateChanged", function (t) {
                    _this.showPrivate = t.showPrivate;
                    t.hash && _this.showItInTree(t.hash)
                });
                port.on("initOptions", function (t) {
                    isp.highlightType(devtool.TartgetType.hover, t.highlightHover);
                    isp.highlightType(devtool.TartgetType.active, t.highlightClick);
                    Main.preventTouch = t.preventTouch;
                    _this.preventTouch(t.preventTouch);
                    _this.showMethods = t.showMethods;
                    _this.showPrivate = t.showPrivate
                });
                port.on("init", function (t) {
                    _this.refresh()
                });
                port.on("expand", function (msg, callback) {
                    if (devtool.TreeNode.getByHash(msg.hash) == null) {
                        console.log("该显示对象已经不存在，请刷新显示列表");
                        return
                    }
                    var it = devtool.TreeNode.getByHash(msg.hash).raw;
                    var expression = msg.expression;
                    var value = eval("it" + expression);
                    var tree = devtool.TreeNode.parseRawProps(value, 0, new devtool.TreeNode, {
                        showMethods: _this.showMethods,
                        showPrivate: _this.showPrivate
                    });
                    callback(tree)
                });
                var propIdx = 0;
                port.on("store", function (msg) {
                    if (devtool.TreeNode.getByHash(msg.hashCode) == null) {
                        console.log("该显示对象已经不存在，请刷新显示列表");
                        return
                    }
                    var value = devtool.TreeNode.getByHash(msg.hashCode).raw;
                    var varName = "obj" + msg.hashCode;
                    if (msg.expression) {
                        value = eval("value" + msg.expression);
                        varName = "prop" + propIdx++
                    }
                    window[varName] = value;
                    console.log(varName);
                    console.log(value)
                });
                port.on("applyChange", function (msg, callback) {
                    var node = devtool.TreeNode.getByHash(msg.hash);
                    if (!node) {
                        callback({
                            success: false
                        });
                        return
                    }
                    var it = node.raw;
                    var expression = msg.expression,
                        exps = msg.expressions || {};
                    var result = {};
                    var applyChange = function (exp, value, it) {
                        if (!exp) return undefined;
                        eval("it" + exp + "=eval('(" + value + ")')");
                        return eval("it" + exp)
                    };
                    try {
                        if (expression) result = applyChange(expression, msg.value, it);
                        for (var exp in exps) {
                            result[exp] = applyChange(exp, exps[exp], it)
                        }
                        if (result == NaN) result = "NaN";
                        window.setTimeout(function () {
                            return callback({
                                success: true,
                                result: result
                            })
                        }, 20)
                    } catch (e) {
                        console.log(e.stack);
                        callback({
                            success: false
                        })
                    }
                });
                port.on("expandTree", function (t, e) {
                    var r = devtool.TreeNode.getByHash(t.hashCode);
                    r.parseChildren();
                    e(r)
                });
                port.on("refresh", function (t, e) {
                    devtool.TreeNode.clear();
                    var r = isp.getLastSelected();
                    if (!r || !r.stage) {
                        r = currentStage || lark_stages[0]
                    }
                    var i = devtool.TreeNode.linkToIt(r);
                    e({
                        tree: i,
                        hash: r.hashCode
                    });
                    _this.showItInTree(r.hashCode)
                });
                port.on("refreshProp", function (t) {
                    _this.showItInTree(t.hash, null)
                });
                port.on("search", this.search);
                return this
            };
            Main.prototype.refresh = function () {
                devtool.TreeNode.clear();
                var t = currentStage;
                this.tree = devtool.TreeNode.parseNode(t, new devtool.TreeNode, true, 2);
                this.tree.showChildren();
                this.transTreeToPanel();
                this.showItInTree(t.hashCode)
            };
            Main.prototype.transTreeToPanel = function (t) {
                if (t === void 0) {
                    t = this.tree
                }
                this.port.post({
                    name: "updateTree",
                    data: this.tree
                })
            };
            Main.prototype.showItInTree = function (t, e) {
                if (e === void 0) {
                    e = null
                }
                var r = devtool.TreeNode.getByHash(t);
                if (!r) return;
                var i = r.parseRawProps(0, new devtool.TreeNode, {
                    showPrivate: this.showPrivate,
                    showMethods: this.showMethods
                });
                this.transGameSelection(r.rawHash, i, e)
            };
            Main.prototype.transGameSelection = function (t, e, r) {
                if (r === void 0) {
                    r = null
                }
                this.port.post({
                    name: "updateSelection",
                    data: {
                        hash: t,
                        props: e,
                        treeChange: r
                    }
                })
            };
            Main.prototype.showTreeSelection = function (t, e) {
                if (e === void 0) {
                    e = false
                }
                var r = devtool.TreeNode.getByHash(t);
                r && currentInspector.show(r.raw, e ? devtool.TartgetType.hover : devtool.TartgetType.active)
            };
            Main.prototype.preventTouch = function (t) {
                currentInspector.preventTouch(t)
            };
            Main.preventTouch = false;
            Main.instance = null;
            return Main
        }();
        devtool.Main = Main;

        function start() {
            var t = function (t) {
                t.post({
                    name: "init",
                    from: "stage",
                    href: location.href
                });
                t.post({
                    name: "ready"
                });
                Main.instance.port = t;
                Main.instance.init()
            };
            var e = function () {
                Main.instance = new Main;
                if (stagePort) {
                    t(stagePort)
                } else {
                    var e = devtool.PortFactory.getStagePortClass();
                    stagePort = new e(location.host, function () {
                        t(port)
                    })
                }
            };

            function r() {
                var t = document.querySelector(".egret-player");
                if (!t) return null;
                if (!t["egret-player"]) {
                    return null
                }
                return t["egret-player"].stage
            }

            function i() {
                return egret.MainContext && egret.MainContext.instance && egret.MainContext.instance.stage
            }
            var n = r();
            var s = i();
            if (n || s) {
                if (egret.devtool.Inspector.instance) return;
                if (n) {
                    currentStage = n;
                    currentInspector = new devtool.Egret2xInspector;
                    currentInspector.attach(currentStage)
                } else {
                    currentStage = s;
                    egret.devtool.Inspector.attach(currentStage);
                    currentInspector = egret.devtool.Inspector.instance
                }
                e()
            } else if (window["lark_stages"] && lark_stages.length) {
                currentStage = lark_stages[0];
                currentInspector = new devtool.LarkInspector;
                currentInspector.attach(currentStage);
                e()
            } else {
                window.setTimeout(start, 200)
            }
        }
        devtool.start = start;

        function reset() {
            if (Main.instance) {
                Main.instance.tree.reset();
                currentInspector.detach(currentStage);
                console.log("remove listeners");
                stagePort.removeAll()
            }
        }
        devtool.reset = reset;

        function pause() {}
        devtool.pause = pause;

        function resume() {}
        devtool.resume = resume;
        var stagePort = null;

        function ping() {
            var t = devtool.PortFactory.getStagePortClass();
            stagePort = new t(location.host, function () {
                stagePort.post({
                    name: "isDevToolOpen"
                }, null, function (t) {
                    if (t) {
                        start()
                    }
                })
            })
        }
        devtool.ping = ping;
        ping()
    })(devtool = egret.devtool || (egret.devtool = {}))
})(egret || (egret = {}));